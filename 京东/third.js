//ready
//1、
//前端解决高并发问题
//（1）减少http请求，黄金法则
// 大于10%-20%的最终相应时间是花在接收请求的html文档上的，剩下的时间是在组件上
// 适当减少一些组件的数量
//（2）CSS sprites css精灵
// 将多个图片合为一个大图，
// 再通过backgroud-image和backgroud-position来显示小图片
// 该方法的优点：很好地减少http请求次数，减少图片的字节，减少命名，更换风格方便
// 该方法的缺点：计算好空间，开发繁琐，维护麻烦，
//（3）合并脚本和样式表，具体在多个脚本合为一个脚本，多个样式表合为一个样式表
//（4）使用Base64编码嵌入图片，而不是外部引用
//（5）浏览器缓存，强缓存和协商缓存，一些静态文件，例如媒体内容建议强缓存；经常改动的文件或者资源协商缓存
//（6）前端代码压缩，JS和CSS压缩、YUI Compressor
//（7）CDN加速
//（8）独立域名
//（9）独立图片服务器

//2、
//webpack原理
//entry：一个可执行模块或库的入口文件
//chunk：多个文件组成的一个代码块，一个可执行模块和它所有依赖的模块组合和一个chunk体现了webpack的打包机制
//loader 文件转换器，es6转es5或者 scss转css
//plugin：插件，扩展webpack功能